const config = require ('../../config');
const utils = require ('../utils');
const breakpoints = config.grid.breakpoints;
const columns = config.grid.columns;
const destinationFile = config.grid.cssDestination;

const getBreakpointSizeCss= (denominators, alias) => {
  var initialCss = denominators.reduce((previous, denominator) => {
    var css = '';
    for (var numerator = 1; numerator <= denominator; numerator++) {
      var selector = `
[data-breakpoint-${alias ? alias : 'none'}="${numerator}-of-${denominator}"]`;
      css += `${selector} {
  width: ${(numerator/denominator)*100}% !important;
}`
    }
    return `${previous}
  ${css}`;
  }, '');

  var hideCss = `
[data-breakpoint-${alias ? alias : 'none'}=""] {
  display: none !important;
}`
  return initialCss += hideCss;
};

const getContent = () => {
  var ret = `/* this file is generated by script utils/widths, change the script rather than this file! */
  ${getBreakpointSizeCss(columns, '')}`;
  ret += Object.keys(breakpoints).reduce((previous, condition) => {
    var alias = breakpoints[condition];
    var css = getBreakpointSizeCss(columns, alias);
    return  `${previous}
${condition} {
  ${css}
}
`;
  }, '');
  return ret;
};

module.exports.build = () => {
  utils.writeFile(destinationFile, getContent())
  .then(() => {
    console.log(`built ${destinationFile} file!`);
  }).catch((err) => {
    console.log(err.message);
    console.log(err.stack);
  });
};
